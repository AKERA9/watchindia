import React, { useState } from 'react';
import { Icon } from './Icon';
import { generateVideo } from '../services/geminiService';

interface UploadModalProps {
  onClose: () => void;
  onAddVideo: (video: { url: string; description: string; duration: number; title: string }) => void;
}

type Tab = 'upload' | 'generate';

export const UploadModal: React.FC<UploadModalProps> = ({ onClose, onAddVideo }) => {
  const [activeTab, setActiveTab] = useState<Tab>('generate');
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [prompt, setPrompt] = useState('');
  const [videoUrl, setVideoUrl] = useState<string | null>(null);
  const [videoDuration, setVideoDuration] = useState<number | null>(null);
  const [fileName, setFileName] = useState<string | null>(null);
  
  const [isLoading, setIsLoading] = useState(false);
  const [generationStatus, setGenerationStatus] = useState('');
  const [error, setError] = useState<string | null>(null);

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0];
      const url = URL.createObjectURL(file);
      setFileName(file.name);
      setVideoUrl(url);

      const videoElement = document.createElement('video');
      videoElement.preload = 'metadata';
      videoElement.onloadedmetadata = () => {
        window.URL.revokeObjectURL(videoElement.src);
        setVideoDuration(Math.round(videoElement.duration));
      };
      videoElement.src = url;
    }
  };

  const handleGenerateVideo = async () => {
      if (!prompt) {
          setError("Please enter a prompt to generate a video.");
          return;
      }
      setIsLoading(true);
      setError(null);
      setVideoUrl(null);
      
      try {
          const url = await generateVideo(prompt, setGenerationStatus);
          setVideoUrl(url);
          setTitle(prompt); // Pre-fill title with the prompt
          setDescription("Video generated by AI from prompt: " + prompt); // Pre-fill description
      } catch (e) {
          setError(e instanceof Error ? e.message : "An unknown error occurred.");
      } finally {
          setIsLoading(false);
          setGenerationStatus('');
      }
  };
  
  const handlePost = () => {
    if (videoUrl && description && title) {
      let duration = 0;
      if (activeTab === 'upload' && videoDuration !== null) {
          duration = videoDuration;
      } else if (activeTab === 'generate') {
          duration = 15; // Assume generated videos are shorts
      }
      onAddVideo({ url: videoUrl, description, duration, title });
    }
  };

  return (
    <div className="fixed inset-0 bg-black/80 backdrop-blur-sm flex items-center justify-center z-50 p-4">
      <div className="relative bg-gray-900 rounded-2xl w-full max-w-2xl text-white shadow-xl border border-gray-700">
        <button onClick={onClose} className="absolute top-4 right-4 text-gray-400 hover:text-white">
          <Icon name="close" className="h-6 w-6" />
        </button>

        <div className="p-8 max-h-[90vh] overflow-y-auto">
          <h2 className="text-2xl font-bold mb-6 text-center">Create New Post</h2>
          
          <div className="flex justify-center border-b border-gray-700 mb-6">
            <button onClick={() => setActiveTab('generate')} className={`px-4 py-2 font-semibold transition-colors ${activeTab === 'generate' ? 'text-red-500 border-b-2 border-red-500' : 'text-gray-400'}`}>
              Generate with AI
            </button>
            <button onClick={() => setActiveTab('upload')} className={`px-4 py-2 font-semibold transition-colors ${activeTab === 'upload' ? 'text-red-500 border-b-2 border-red-500' : 'text-gray-400'}`}>
              Upload File
            </button>
          </div>

          {videoUrl && !isLoading && (
            <div className="mb-4">
                <p className="font-semibold mb-2">Preview:</p>
                <video src={videoUrl} controls className="w-full rounded-lg max-h-64 object-contain bg-black"></video>
            </div>
          )}

          {activeTab === 'generate' && (
            <div>
              <textarea
                value={prompt}
                onChange={(e) => setPrompt(e.target.value)}
                placeholder="Describe your video idea... e.g., 'A robot holding a red skateboard.'"
                className="w-full bg-gray-800 border border-gray-700 rounded-lg p-3 mb-4 focus:outline-none focus:ring-2 focus:ring-red-500"
                rows={3}
                disabled={isLoading}
              />
              <button onClick={handleGenerateVideo} disabled={isLoading} className="w-full bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-4 rounded-lg disabled:bg-gray-600 disabled:cursor-not-allowed flex items-center justify-center gap-2">
                {isLoading ? <Icon name="spinner" className="animate-spin h-5 w-5" /> : <Icon name="sparkles" className="h-5 w-5" />}
                {isLoading ? 'Generating...' : 'Generate Video'}
              </button>
              {isLoading && <p className="text-center text-sm text-gray-400 mt-4 animate-pulse">{generationStatus}</p>}
            </div>
          )}

          {activeTab === 'upload' && (
            <div>
              <label className="w-full flex flex-col items-center justify-center px-4 py-6 bg-gray-800 border-2 border-dashed border-gray-700 rounded-lg cursor-pointer hover:bg-gray-700/50">
                <Icon name="uploadCloud" className="h-10 w-10 text-gray-500 mb-2" />
                <span className="text-sm font-semibold text-gray-300">{fileName || "Click to upload a video"}</span>
                <input type="file" className="hidden" accept="video/*" onChange={handleFileChange} />
              </label>
            </div>
          )}
          
          {error && <p className="text-red-500 text-sm mt-4 text-center">{error}</p>}
          
          {videoUrl && !isLoading && (
            <div className="mt-6">
              <input
                type="text"
                value={title}
                onChange={(e) => setTitle(e.target.value)}
                placeholder="Title"
                className="w-full bg-gray-800 border border-gray-700 rounded-lg p-3 mb-4 focus:outline-none focus:ring-2 focus:ring-red-500"
              />
              <textarea
                value={description}
                onChange={(e) => setDescription(e.target.value)}
                placeholder="Add a description..."
                className="w-full bg-gray-800 border border-gray-700 rounded-lg p-3 mb-4 focus:outline-none focus:ring-2 focus:ring-red-500"
                rows={2}
              />
              <button onClick={handlePost} disabled={!description || !title} className="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-4 rounded-lg disabled:bg-gray-600">
                Post
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};